generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(uuid())
  name           String
  email          String             @unique
  password       String
  role           UserRole           @default(STUDENT)
  courseId       String?
  course         Course?            @relation(fields: [courseId], references: [id])
  courseRoles    CourseRole[]       // Связь с ролями в курсах
  comments       Comment[]
  taskStatuses   UserTaskStatus[]
  activeSprints  UserActiveSprint[]
  refreshTokens  RefreshToken[]
  loginAttempts  LoginAttempt[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime
  changePassword DateTime
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String?
  ownerId     String?      // ID администратора курса
  users       User[]
  courseRoles CourseRole[]
  sprints     Sprint[] @relation("CourseSprints")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Модель для связи пользователей с курсами и их ролями
model CourseRole {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  role      UserRole
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, courseId]) // Один пользователь - одна роль в курсе
}

model Sprint {
  id          String             @id @default(uuid())
  title       String
  course      Course             @relation("CourseSprints", fields: [courseId], references: [id]) // Обратное отношение
  courseId    String
  tasks       Task[]
  activeUsers UserActiveSprint[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime
}

model UserActiveSprint {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  sprint   Sprint @relation(fields: [sprintId], references: [id])
  userId   String
  sprintId String

  @@unique([userId, sprintId]) // 1 пользователь — 1 активный спринт
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String
  column      KanbanColumn @relation(fields: [columnId], references: [id])
  columnId    String

  sprint   Sprint @relation(fields: [sprintId], references: [id])
  sprintId String

  progress   Int              @default(0) // 0-100
  difficulty KanbanDifficulty
  topics     String[] // строковые темы

  dueDate DateTime? // дедлайн
  done    Boolean   @default(false)

  subtasksCount Int? // общее число подзадач
  subtasksDone  Int? // выполнено подзадач

  attachments  Attachment[]
  comments     Comment[]
  taskStatuses UserTaskStatus[]
  deletedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KanbanColumn {
  id    String @id
  title String
  tasks Task[]
}

enum KanbanDifficulty {
  EASY
  MEDIUM
  HARD
}

model Attachment {
  id      String @id @default(uuid())
  fileUrl String
  task    Task   @relation(fields: [taskId], references: [id])
  taskId  String
  deletedAt DateTime?
}

model Comment {
  id     String @id @default(uuid())
  text   String
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTaskStatus {
  id     String     @id @default(uuid())
  user   User       @relation(fields: [userId], references: [id])
  task   Task       @relation(fields: [taskId], references: [id])
  userId String
  taskId String
  status TaskStatus

  @@unique([userId, taskId]) // Уникальный статус на пару user-task
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
  userAgent String?  // User-Agent для дополнительной защиты
  ipAddress String?  // IP адрес для дополнительной защиты
}

model LoginAttempt {
  id        String   @id @default(uuid())
  email     String
  ipAddress String
  success   Boolean
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum UserRole {
  ADMIN
  MANAGER
  STUDENT
}
