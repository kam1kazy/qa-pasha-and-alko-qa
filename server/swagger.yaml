openapi: 3.0.0
info:
  title: QA Pasha & Alko API
  version: 1.0.0

paths:
  /auth/register:
    post:
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя в системе.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
            example:
              email: "user@example.com"
              password: "stringPassword123"
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthPayload'
              example:
                id: "user123"
                email: "user@example.com"
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат email или пароль"
        '409':
          description: Пользователь с таким email уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Пользователь с таким email уже зарегистрирован"

  /auth/login:
    post:
      summary: Вход пользователя
      description: Аутентификация пользователя в системе.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
            example:
              email: "user@example.com"
              password: "stringPassword123"
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT-токен для авторизации
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный email или пароль"

  /tasks:
    post:
      summary: Создать задачу
      description: Создает новую задачу в системе.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskDto'
            example:
              title: "Сделать Swagger"
              description: "Добавить документацию для API"
              columnId: "col123"
              sprintId: "spr456"
              difficulty: "MEDIUM"
              topics: ["Документация", "Swagger"]
              dueDate: "2024-07-01T12:00:00Z"
              subtasksCount: 3
      responses:
        '201':
          description: Задача успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTaskDto'
              example:
                title: "Сделать Swagger"
                description: "Добавить документацию для API"
                columnId: "col123"
                sprintId: "spr456"
                difficulty: "MEDIUM"
                topics: ["Документация", "Swagger"]
                dueDate: "2024-07-01T12:00:00Z"
                subtasksCount: 3
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Колонка или спринт не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Колонка или спринт не найдены"
      security:
        - bearerAuth: []

  /tasks/list:
    get:
      summary: Получить все задачи
      description: Возвращает список всех задач.
      responses:
        '200':
          description: Список задач
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateTaskDto'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Требуется авторизация"
      security:
        - bearerAuth: []

  /tasks/{id}:
    get:
      summary: Получить задачу по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор задачи
      responses:
        '200':
          description: Задача
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTaskDto'
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Задача не найдена"
      security:
        - bearerAuth: []
    put:
      summary: Обновить задачу
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор задачи
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskDto'
            example:
              title: "Обновить Swagger"
              done: true
              progress: 100
      responses:
        '200':
          description: Задача обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTaskDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Задача не найдена"
      security:
        - bearerAuth: []
    delete:
      summary: Удалить задачу
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор задачи
      responses:
        '204':
          description: Успешное удаление
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Задача не найдена"
      security:
        - bearerAuth: []

  /sprints:
    post:
      summary: Создать спринт
      description: Создает новый спринт в системе.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSprintDto'
            example:
              title: "Спринт 1"
      responses:
        '201':
          description: Спринт создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSprintDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
      security:
        - bearerAuth: []

  /sprints/list:
    get:
      summary: Получить все спринты
      description: Возвращает список всех спринтов.
      responses:
        '200':
          description: Список спринтов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateSprintDto'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Требуется авторизация"
      security:
        - bearerAuth: []

  /sprints/{id}:
    get:
      summary: Получить спринт по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор спринта
      responses:
        '200':
          description: Спринт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSprintDto'
        '404':
          description: Спринт не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Спринт не найден"
      security:
        - bearerAuth: []
    put:
      summary: Обновить спринт
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор спринта
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSprintDto'
            example:
              title: "Спринт 2"
      responses:
        '200':
          description: Спринт обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSprintDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Спринт не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Спринт не найден"
      security:
        - bearerAuth: []
    delete:
      summary: Удалить спринт
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор спринта
      responses:
        '204':
          description: Успешное удаление
        '404':
          description: Спринт не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Спринт не найден"
      security:
        - bearerAuth: []

  /comments:
    post:
      summary: Создать комментарий
      description: Добавляет новый комментарий к задаче.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentDto'
            example:
              text: "Отличная работа!"
              taskId: "task123"
              userId: "user456"
      responses:
        '201':
          description: Комментарий создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommentDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Задача или пользователь не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Задача или пользователь не найдены"
      security:
        - bearerAuth: []

  /comments/list:
    get:
      summary: Получить все комментарии
      description: Возвращает список всех комментариев.
      responses:
        '200':
          description: Список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateCommentDto'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Требуется авторизация"
      security:
        - bearerAuth: []

  /comments/{id}:
    get:
      summary: Получить комментарий по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор комментария
      responses:
        '200':
          description: Комментарий
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommentDto'
        '404':
          description: Комментарий не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Комментарий не найден"
      security:
        - bearerAuth: []
    put:
      summary: Обновить комментарий
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор комментария
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentDto'
            example:
              text: "Исправил замечания"
      responses:
        '200':
          description: Комментарий обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCommentDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Комментарий не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Комментарий не найден"
      security:
        - bearerAuth: []
    delete:
      summary: Удалить комментарий
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор комментария
      responses:
        '204':
          description: Успешное удаление
        '404':
          description: Комментарий не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Комментарий не найден"
      security:
        - bearerAuth: []

  /columns:
    post:
      summary: Создать колонку
      description: Создает новую колонку в канбан-доске.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKanbanColumnDto'
            example:
              id: "col123"
              title: "В работе"
      responses:
        '201':
          description: Колонка создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKanbanColumnDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
      security:
        - bearerAuth: []

  /columns/list:
    get:
      summary: Получить все колонки
      description: Возвращает список всех колонок.
      responses:
        '200':
          description: Список колонок
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateKanbanColumnDto'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Требуется авторизация"
      security:
        - bearerAuth: []

  /columns/{id}:
    get:
      summary: Получить колонку по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор колонки
      responses:
        '200':
          description: Колонка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKanbanColumnDto'
        '404':
          description: Колонка не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Колонка не найдена"
      security:
        - bearerAuth: []
    put:
      summary: Обновить колонку
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор колонки
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKanbanColumnDto'
            example:
              title: "Готово"
      responses:
        '200':
          description: Колонка обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateKanbanColumnDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Колонка не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Колонка не найдена"
      security:
        - bearerAuth: []
    delete:
      summary: Удалить колонку
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор колонки
      responses:
        '204':
          description: Успешное удаление
        '404':
          description: Колонка не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Колонка не найдена"
      security:
        - bearerAuth: []

  /attachments:
    post:
      summary: Создать вложение
      description: Добавляет новое вложение к задаче.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAttachmentDto'
            example:
              fileUrl: "https://example.com/file.pdf"
              taskId: "task123"
      responses:
        '201':
          description: Вложение создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAttachmentDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Задача не найдена"
      security:
        - bearerAuth: []

  /attachments/list:
    get:
      summary: Получить все вложения
      description: Возвращает список всех вложений.
      responses:
        '200':
          description: Список вложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateAttachmentDto'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Требуется авторизация"
      security:
        - bearerAuth: []

  /attachments/{id}:
    get:
      summary: Получить вложение по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор вложения
      responses:
        '200':
          description: Вложение
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAttachmentDto'
        '404':
          description: Вложение не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Вложение не найдено"
      security:
        - bearerAuth: []
    put:
      summary: Обновить вложение
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор вложения
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttachmentDto'
            example:
              fileUrl: "https://example.com/file2.pdf"
      responses:
        '200':
          description: Вложение обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAttachmentDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Вложение не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Вложение не найдено"
      security:
        - bearerAuth: []
    delete:
      summary: Удалить вложение
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор вложения
      responses:
        '204':
          description: Успешное удаление
        '404':
          description: Вложение не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Вложение не найдено"
      security:
        - bearerAuth: []

  /user-task-statuses:
    post:
      summary: Создать статус задачи пользователя
      description: Создает новый статус задачи для пользователя.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserTaskStatusDto'
            example:
              userId: "user123"
              taskId: "task456"
              status: "IN_PROGRESS"
      responses:
        '201':
          description: Статус создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserTaskStatusDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Пользователь или задача не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Пользователь или задача не найдены"
      security:
        - bearerAuth: []

  /user-task-statuses/list:
    get:
      summary: Получить все статусы задач пользователя
      description: Возвращает список всех статусов задач пользователя.
      responses:
        '200':
          description: Список статусов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateUserTaskStatusDto'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Требуется авторизация"
      security:
        - bearerAuth: []

  /user-task-statuses/{id}:
    get:
      summary: Получить статус задачи пользователя по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор статуса
      responses:
        '200':
          description: Статус
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserTaskStatusDto'
        '404':
          description: Статус не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Статус не найден"
      security:
        - bearerAuth: []
    put:
      summary: Обновить статус задачи пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор статуса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserTaskStatusDto'
            example:
              status: "DONE"
      responses:
        '200':
          description: Статус обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserTaskStatusDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Статус не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Статус не найден"
      security:
        - bearerAuth: []
    delete:
      summary: Удалить статус задачи пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор статуса
      responses:
        '204':
          description: Успешное удаление
        '404':
          description: Статус не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Статус не найден"
      security:
        - bearerAuth: []

  /user-active-sprints:
    post:
      summary: Создать активный спринт пользователя
      description: Создает новый активный спринт для пользователя.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserActiveSprintDto'
            example:
              userId: "user123"
              sprintId: "spr456"
      responses:
        '201':
          description: Активный спринт создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserActiveSprintDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Пользователь или спринт не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Пользователь или спринт не найдены"
      security:
        - bearerAuth: []

  /user-active-sprints/list:
    get:
      summary: Получить все активные спринты пользователя
      description: Возвращает список всех активных спринтов пользователя.
      responses:
        '200':
          description: Список активных спринтов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateUserActiveSprintDto'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Требуется авторизация"
      security:
        - bearerAuth: []

  /user-active-sprints/{id}:
    get:
      summary: Получить активный спринт пользователя по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор активного спринта
      responses:
        '200':
          description: Активный спринт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserActiveSprintDto'
        '404':
          description: Активный спринт не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Активный спринт не найден"
      security:
        - bearerAuth: []
    put:
      summary: Обновить активный спринт пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор активного спринта
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserActiveSprintDto'
            example:
              userId: "user123"
              sprintId: "spr789"
      responses:
        '200':
          description: Активный спринт обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserActiveSprintDto'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Неверный формат данных"
        '404':
          description: Активный спринт не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Активный спринт не найден"
      security:
        - bearerAuth: []
    delete:
      summary: Удалить активный спринт пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Идентификатор активного спринта
      responses:
        '204':
          description: Успешное удаление
        '404':
          description: Активный спринт не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Активный спринт не найден"
      security:
        - bearerAuth: []

components:
  schemas:
    RegisterDto:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          description: Email пользователя для регистрации
        password:
          type: string
          format: password
          description: Пароль пользователя (минимум 8 символов)
      example:
        email: "user@example.com"
        password: "stringPassword123"

    LoginDto:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          description: Email пользователя для входа
        password:
          type: string
          format: password
          description: Пароль пользователя
      example:
        email: "user@example.com"
        password: "stringPassword123"

    AuthPayload:
      type: object
      required: [id, email]
      properties:
        id:
          type: string
          description: Уникальный идентификатор пользователя
        email:
          type: string
          format: email
          description: Email пользователя
      example:
        id: "user123"
        email: "user@example.com"

    CreateKanbanColumnDto:
      type: object
      required: [id, title]
      properties:
        id:
          type: string
          description: Уникальный идентификатор колонки (задаётся явно)
        title:
          type: string
          description: Название колонки
      example:
        id: "col123"
        title: "В работе"

    UpdateKanbanColumnDto:
      type: object
      properties:
        title:
          type: string
          description: Новое название колонки
      example:
        title: "Готово"

    CreateAttachmentDto:
      type: object
      required: [fileUrl, taskId]
      properties:
        fileUrl:
          type: string
          format: uri
          description: URL файла вложения
        taskId:
          type: string
          description: Идентификатор задачи, к которой прикрепляется вложение
      example:
        fileUrl: "https://example.com/file.pdf"
        taskId: "task123"

    UpdateAttachmentDto:
      type: object
      properties:
        fileUrl:
          type: string
          format: uri
          description: Новый URL файла вложения
      example:
        fileUrl: "https://example.com/file2.pdf"

    CreateSprintDto:
      type: object
      required: [title]
      properties:
        title:
          type: string
          description: Название спринта
      example:
        title: "Спринт 1"

    UpdateSprintDto:
      type: object
      properties:
        title:
          type: string
          description: Новое название спринта
      example:
        title: "Спринт 2"

    CreateTaskDto:
      type: object
      required: [title, description, columnId, sprintId, difficulty]
      properties:
        title:
          type: string
          description: Название задачи
        description:
          type: string
          description: Описание задачи
        columnId:
          type: string
          description: Идентификатор колонки, к которой относится задача
        sprintId:
          type: string
          description: Идентификатор спринта, к которому относится задача
        difficulty:
          type: string
          enum: [EASY, MEDIUM, HARD]
          description: Уровень сложности задачи
        topics:
          type: array
          items:
            type: string
          description: Темы или теги задачи
        dueDate:
          type: string
          format: date-time
          description: Срок выполнения задачи
        subtasksCount:
          type: integer
          description: Количество подзадач
      example:
        title: "Сделать Swagger"
        description: "Добавить документацию для API"
        columnId: "col123"
        sprintId: "spr456"
        difficulty: "MEDIUM"
        topics: ["Документация", "Swagger"]
        dueDate: "2024-07-01T12:00:00Z"
        subtasksCount: 3

    UpdateTaskDto:
      type: object
      properties:
        title:
          type: string
          description: Новое название задачи
        description:
          type: string
          description: Новое описание задачи
        columnId:
          type: string
          description: Новый идентификатор колонки
        sprintId:
          type: string
          description: Новый идентификатор спринта
        difficulty:
          type: string
          enum: [EASY, MEDIUM, HARD]
          description: Новый уровень сложности задачи
        topics:
          type: array
          items:
            type: string
          description: Новые темы или теги задачи
        dueDate:
          type: string
          format: date-time
          description: Новый срок выполнения задачи
        done:
          type: boolean
          description: Статус завершения задачи
        subtasksCount:
          type: integer
          description: Новое количество подзадач
        subtasksDone:
          type: integer
          description: Количество выполненных подзадач
        progress:
          type: integer
          description: Процент выполнения задачи
      example:
        title: "Обновить Swagger"
        done: true
        progress: 100

    CreateUserActiveSprintDto:
      type: object
      required: [userId, sprintId]
      properties:
        userId:
          type: string
          description: Идентификатор пользователя
        sprintId:
          type: string
          description: Идентификатор спринта
      example:
        userId: "user123"
        sprintId: "spr456"

    UpdateUserActiveSprintDto:
      type: object
      properties:
        userId:
          type: string
          description: Новый идентификатор пользователя
        sprintId:
          type: string
          description: Новый идентификатор спринта
      example:
        userId: "user123"
        sprintId: "spr789"

    CreateUserTaskStatusDto:
      type: object
      required: [userId, taskId, status]
      properties:
        userId:
          type: string
          description: Идентификатор пользователя
        taskId:
          type: string
          description: Идентификатор задачи
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
          description: Статус задачи
      example:
        userId: "user123"
        taskId: "task456"
        status: "IN_PROGRESS"

    UpdateUserTaskStatusDto:
      type: object
      properties:
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
          description: Новый статус задачи
      example:
        status: "DONE"

    CreateCommentDto:
      type: object
      required: [text, taskId, userId]
      properties:
        text:
          type: string
          description: Текст комментария
        taskId:
          type: string
          description: Идентификатор задачи, к которой относится комментарий
        userId:
          type: string
          description: Идентификатор пользователя, оставившего комментарий
      example:
        text: "Отличная работа!"
        taskId: "task123"
        userId: "user456"

    UpdateCommentDto:
      type: object
      properties:
        text:
          type: string
          description: Новый текст комментария
      example:
        text: "Исправил замечания"

    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
          description: Описание ошибки
      example:
        message: "Произошла ошибка"

    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT

1. **Schemas for All DTOs**:
   - Added detailed schemas for all referenced DTOs (`CreateKanbanColumnDto`, `UpdateKanbanColumnDto`, `CreateAttachmentDto`, `UpdateAttachmentDto`, `CreateSprintDto`, `UpdateSprintDto`, `CreateTaskDto`, `UpdateTaskDto`, `CreateUserActiveSprintDto`, `UpdateUserActiveSprintDto`, `CreateUserTaskStatusDto`, `UpdateUserTaskStatusDto`, `CreateCommentDto`, `UpdateCommentDto`, `AuthPayload`) based on the provided TypeScript interfaces.
   - Each schema includes `type`, `required` fields, `properties` with types and descriptions, and an `example` matching the provided JSON examples.

2. **Field Descriptions**:
   - Added `description` for each field in all schemas to clarify their purpose (e.g., "Уникальный идентификатор колонки (задаётся явно)" for `id` in `CreateKanbanColumnDto`).

3. **Error Responses**:
   - Added `400` (Bad Request) for invalid data formats across all POST/PUT endpoints.
   - Added `404` (Not Found) for cases where referenced entities (e.g., task, sprint, user) are not found.
   - Added `401` (Unauthorized) for endpoints requiring authentication.
   - Defined an `Error` schema with a `message` field and included examples for error responses.

5. **Response Content**:
   - Added `content` with `application/json` and appropriate schemas for successful responses (e.g., `201` for POST, `200` for PUT/GET).
   - Ensured response schemas match the input DTOs where applicable (e.g., `CreateTaskDto` for `/tasks` POST response).

6. **Examples**:
   - Included `example` fields in `requestBody` and `responses` matching the provided JSON examples or TypeScript interface examples.
   - Ensured examples are consistent with the schema definitions.

7. **Path Parameters**:
   - Added `description` to all path parameters (e.g., `id` in `/tasks/{id}`).

8. **Consistency**:
   - Removed duplicate `CreateKanbanColumnDto` and `UpdateKanbanColumnDto` definitions from the TypeScript input.
   - Ensured all endpoints follow a consistent structure for request/response bodies, errors, and security.
