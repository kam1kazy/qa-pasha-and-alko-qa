import { prismaService } from './db.js';

import { logger } from '@/config/logger.js';
import courses from './configs/courses.json' with { type: 'json' };
import kanbanColumns from './configs/kanbanColumns.json' with { type: 'json' };
import sprints from './configs/sprints.json' with { type: 'json' };
import tasks from './configs/tasks.json' with { type: 'json' };
import userActiveSprints from './configs/userActiveSprints.json' with { type: 'json' };
import users from './configs/users.json' with { type: 'json' };
import userTaskStatuses from './configs/userTaskStatuses.json' with { type: 'json' };

const seed = async () => {
  logger.info(`\nPRISMA: üåæ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–µ–≤ –¥–∞–Ω–Ω—ã—Ö...`);


  // –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await prismaService.clearDatabase();

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  await prismaService.loadUsers(users);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã
  await prismaService.loadCourses(courses);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∏–Ω—Ç—ã
  await prismaService.loadSprints(sprints);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ö–∞–Ω–±–∞–Ω
  await prismaService.loadKanbanColumns(kanbanColumns);

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
  await prismaService.loadTasks(tasks);

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø—Ä–∏–Ω—Ç—ã
  await prismaService.loadUserActiveSprints(userActiveSprints);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
  await prismaService.loadUserTaskStatuses(userTaskStatuses);

  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  await prismaService.getStats();

  logger.info('üõ°Ô∏è PRISMA: üéâ –ü–æ—Å–µ–≤ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
};

seed()
  .then(() => {
    logger.info('üõ°Ô∏è –ü–æ—Å–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  })
  .catch((error) => {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å–µ–≤–µ:', error);
  });

export default seed;
