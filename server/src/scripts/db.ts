import { prisma } from '@/infrastructure/prisma/client.js';

export class PrismaService {
  private prisma: typeof prisma;

  constructor() {
    this.prisma = prisma;
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –±–∞–∑—ã
  async clearDatabase() {
    try {
      // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
      await this.prisma.$transaction([
        this.prisma.userTaskStatus.deleteMany(),
        this.prisma.userActiveSprint.deleteMany(),
        this.prisma.comment.deleteMany(),
        this.prisma.attachment.deleteMany(),
        this.prisma.task.deleteMany(),
        this.prisma.kanbanColumn.deleteMany(),
        this.prisma.sprint.deleteMany(),
        this.prisma.course.deleteMany(),
        this.prisma.user.deleteMany(),
      ]);

      console.log('PRISMA: üóë –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
    } catch (error) {
      console.error('PRISMA: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async loadUsers(users: any[]) {
    try {
      console.log(`PRISMA: üìù –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      await this.prisma.user.createMany({
        data: users,
        skipDuplicates: true,
      });
      console.log(`PRISMA: üìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    } catch (error) {
      console.error('PRISMA: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤
  async loadCourses(courses: any[]) {
    try {
      console.log(`PRISMA: üìù –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ ${courses.length} –∫—É—Ä—Å–æ–≤`);
      await this.prisma.course.createMany({
        data: courses,
        skipDuplicates: true,
      });
      console.log(`PRISMA: üìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫—É—Ä—Å–æ–≤: ${courses.length}`);
    } catch (error) {
      console.error('PRISMA: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∏–Ω—Ç–æ–≤
  async loadSprints(sprints: any[]) {
    try {
      console.log(`PRISMA: üìù –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ ${sprints.length} —Å–ø—Ä–∏–Ω—Ç–æ–≤`);
      await this.prisma.sprint.createMany({
        data: sprints,
        skipDuplicates: true,
      });
      console.log(`PRISMA: üìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å–ø—Ä–∏–Ω—Ç–æ–≤: ${sprints.length}`);
    } catch (error) {
      console.error('PRISMA: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∏–Ω—Ç–æ–≤:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –ö–∞–Ω–±–∞–Ω
  async loadKanbanColumns(columns: any[]) {
    try {
      console.log(
        `PRISMA: üìù –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ ${columns.length} –∫–æ–ª–æ–Ω–æ–∫ –ö–∞–Ω–±–∞–Ω`
      );
      await this.prisma.kanbanColumn.createMany({
        data: columns,
        skipDuplicates: true,
      });
      console.log(
        `PRISMA: üìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –ö–∞–Ω–±–∞–Ω: ${columns.length}`
      );
    } catch (error) {
      console.error('PRISMA: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ª–æ–Ω–æ–∫ –ö–∞–Ω–±–∞–Ω:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
  async loadTasks(tasks: any[]) {
    try {
      console.log(`PRISMA: üìù –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ ${tasks.length} –∑–∞–¥–∞—á`);
      await this.prisma.task.createMany({
        data: tasks,
        skipDuplicates: true,
      });
      console.log(`PRISMA: üìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`);
    } catch (error) {
      console.error('PRISMA: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤
  async loadUserActiveSprints(userActiveSprints: any[]) {
    try {
      console.log(
        `PRISMA: üìù –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ ${userActiveSprints.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤`
      );
      await this.prisma.userActiveSprint.createMany({
        data: userActiveSprints,
        skipDuplicates: true,
      });
      console.log(
        `PRISMA: üìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤: ${userActiveSprints.length}`
      );
    } catch (error) {
      console.error('PRISMA: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
  async loadUserTaskStatuses(userTaskStatuses: any[]) {
    try {
      console.log(
        `PRISMA: üìù –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ ${userTaskStatuses.length} —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á`
      );
      await this.prisma.userTaskStatus.createMany({
        data: userTaskStatuses,
        skipDuplicates: true,
      });
      console.log(
        `PRISMA: üìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á: ${userTaskStatuses.length}`
      );
    } catch (error) {
      console.error('PRISMA: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async getStats() {
    try {
      const [
        users,
        courses,
        sprints,
        kanbanColumns,
        tasks,
        userActiveSprints,
        userTaskStatuses,
      ] = await Promise.all([
        this.prisma.user.count(),
        this.prisma.course.count(),
        this.prisma.sprint.count(),
        this.prisma.kanbanColumn.count(),
        this.prisma.task.count(),
        this.prisma.userActiveSprint.count(),
        this.prisma.userTaskStatus.count(),
      ]);

      const stats = {
        users,
        courses,
        sprints,
        kanbanColumns,
        tasks,
        userActiveSprints,
        userTaskStatuses,
        lastUpdate: new Date().toISOString(),
      };

      console.log('PRISMA: üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', stats);
      return stats;
    } catch (error) {
      console.error('PRISMA: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }
}

export const prismaService = new PrismaService();
